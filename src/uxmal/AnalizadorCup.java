
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Tue May 20 21:15:58 CDT 2014
//----------------------------------------------------

package uxmal;

import java_cup.runtime.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.Icon;
import javax.swing.ImageIcon;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Tue May 20 21:15:58 CDT 2014
  */
public class AnalizadorCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorCup() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\004\000\002\003\007\000\002\002" +
    "\013\000\002\002\013\000\002\002\013\000\002\002\013" +
    "\000\002\010\014\000\002\014\004\000\002\014\003\000" +
    "\002\004\011\000\002\011\020\000\002\015\004\000\002" +
    "\015\003\000\002\005\021\000\002\012\014\000\002\016" +
    "\004\000\002\016\003\000\002\006\011\000\002\013\020" +
    "\000\002\017\004\000\002\017\003\000\002\007\021" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\004\011\005\001\002\000\004\002\222\001" +
    "\002\000\004\021\006\001\002\000\012\022\013\023\007" +
    "\024\011\025\012\001\002\000\004\005\153\001\002\000" +
    "\004\021\151\001\002\000\004\005\116\001\002\000\004" +
    "\005\047\001\002\000\004\005\014\001\002\000\004\017" +
    "\015\001\002\000\004\013\016\001\002\000\004\021\017" +
    "\001\002\000\004\020\020\001\002\000\004\007\036\001" +
    "\002\000\006\014\ufff9\020\ufff9\001\002\000\006\014\023" +
    "\020\020\001\002\000\004\021\025\001\002\000\006\014" +
    "\ufffa\020\ufffa\001\002\000\004\016\026\001\002\000\004" +
    "\007\030\001\002\000\004\021\uffff\001\002\000\004\015" +
    "\031\001\002\000\004\027\032\001\002\000\004\015\033" +
    "\001\002\000\004\010\034\001\002\000\004\006\035\001" +
    "\002\000\004\021\ufff8\001\002\000\004\015\037\001\002" +
    "\000\004\027\040\001\002\000\004\015\041\001\002\000" +
    "\004\004\042\001\002\000\004\026\043\001\002\000\004" +
    "\010\044\001\002\000\004\006\045\001\002\000\004\021" +
    "\046\001\002\000\006\014\ufffb\020\ufffb\001\002\000\004" +
    "\017\050\001\002\000\004\013\051\001\002\000\004\021" +
    "\052\001\002\000\004\020\053\001\002\000\004\007\101" +
    "\001\002\000\006\014\uffed\020\uffed\001\002\000\006\014" +
    "\056\020\053\001\002\000\004\021\060\001\002\000\006" +
    "\014\uffee\020\uffee\001\002\000\004\016\061\001\002\000" +
    "\004\007\063\001\002\000\004\021\ufffc\001\002\000\004" +
    "\015\064\001\002\000\004\027\065\001\002\000\004\015" +
    "\066\001\002\000\004\004\067\001\002\000\004\015\070" +
    "\001\002\000\004\027\071\001\002\000\004\015\072\001" +
    "\002\000\004\004\073\001\002\000\004\015\074\001\002" +
    "\000\004\027\075\001\002\000\004\015\076\001\002\000" +
    "\004\010\077\001\002\000\004\006\100\001\002\000\004" +
    "\021\uffec\001\002\000\004\026\102\001\002\000\004\004" +
    "\103\001\002\000\004\015\104\001\002\000\004\027\105" +
    "\001\002\000\004\015\106\001\002\000\004\004\107\001" +
    "\002\000\004\015\110\001\002\000\004\027\111\001\002" +
    "\000\004\015\112\001\002\000\004\010\113\001\002\000" +
    "\004\006\114\001\002\000\004\021\115\001\002\000\006" +
    "\014\uffef\020\uffef\001\002\000\004\017\117\001\002\000" +
    "\004\013\120\001\002\000\004\021\121\001\002\000\004" +
    "\020\124\001\002\000\006\014\137\020\124\001\002\000" +
    "\006\014\ufff1\020\ufff1\001\002\000\004\007\125\001\002" +
    "\000\004\015\126\001\002\000\004\027\127\001\002\000" +
    "\004\015\130\001\002\000\004\004\131\001\002\000\004" +
    "\026\132\001\002\000\004\010\133\001\002\000\004\006" +
    "\134\001\002\000\004\021\135\001\002\000\006\014\ufff3" +
    "\020\ufff3\001\002\000\006\014\ufff2\020\ufff2\001\002\000" +
    "\004\021\140\001\002\000\004\016\141\001\002\000\004" +
    "\007\143\001\002\000\004\021\ufffd\001\002\000\004\015" +
    "\144\001\002\000\004\027\145\001\002\000\004\015\146" +
    "\001\002\000\004\010\147\001\002\000\004\006\150\001" +
    "\002\000\004\021\ufff0\001\002\000\004\012\152\001\002" +
    "\000\004\002\000\001\002\000\004\017\154\001\002\000" +
    "\004\013\155\001\002\000\004\021\156\001\002\000\004" +
    "\020\161\001\002\000\006\014\200\020\161\001\002\000" +
    "\006\014\ufff5\020\ufff5\001\002\000\004\007\162\001\002" +
    "\000\004\026\163\001\002\000\004\004\164\001\002\000" +
    "\004\015\165\001\002\000\004\027\166\001\002\000\004" +
    "\015\167\001\002\000\004\004\170\001\002\000\004\015" +
    "\171\001\002\000\004\027\172\001\002\000\004\015\173" +
    "\001\002\000\004\010\174\001\002\000\004\006\175\001" +
    "\002\000\004\021\176\001\002\000\006\014\ufff7\020\ufff7" +
    "\001\002\000\006\014\ufff6\020\ufff6\001\002\000\004\021" +
    "\201\001\002\000\004\016\202\001\002\000\004\007\204" +
    "\001\002\000\004\021\ufffe\001\002\000\004\015\205\001" +
    "\002\000\004\027\206\001\002\000\004\015\207\001\002" +
    "\000\004\004\210\001\002\000\004\015\211\001\002\000" +
    "\004\027\212\001\002\000\004\015\213\001\002\000\004" +
    "\004\214\001\002\000\004\015\215\001\002\000\004\027" +
    "\216\001\002\000\004\015\217\001\002\000\004\010\220" +
    "\001\002\000\004\006\221\001\002\000\004\021\ufff4\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\020\014\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\053\017\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\122" +
    "\016\121\001\001\000\004\012\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\157\015\156\001\001\000\004" +
    "\011\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    //esta es la manera en que se puede acceder a un objeto que se genera durante la etapa del parsing
    public ArrayList<Instruccion> getInstrucciones(){
        return action_obj.instrucciones;
    }
    
    @Override
    public void syntax_error(Symbol sy) {
        int tamaño=AnalizadorLexico.simbolos.size();
         try{
           if(AnalizadorLexico.simbolos.size()==0){
                principal.Uxmal.AreaDeTexto.setText("\"No ahy codigo escrito\"");       
            }else if(sy.value==null){
               principal.Uxmal.AreaDeTexto.setText("Error: [ Fila-> "+(((Integer)AnalizadorLexico.simbolos.get(tamaño-1).getRow())+1)+" : Columna-> "+0+"] \n"
                       +AnalizadorLexico.simbolos.get(tamaño-1).getMensaje()); 
            }else{
                token t=(token)sy.value;
                principal.Uxmal.AreaDeTexto.setText("Error: "+"[ Fila-> "+t.getRow()+" : Columna->"+t.getCol()+"]"
                        +"\n"+t.getMensaje()); 
            }
           
        }catch(Exception ex){
              principal.Uxmal.AreaDeTexto.setText("Error Inesperado: \n"+ex);       
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorCup$actions {


    ArrayList<Instruccion> instrucciones = new ArrayList();

  private final AnalizadorCup parser;

  /** Constructor */
  CUP$AnalizadorCup$actions(AnalizadorCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorCup$do_action_part00000000(
    int                        CUP$AnalizadorCup$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorCup$parser,
    java.util.Stack            CUP$AnalizadorCup$stack,
    int                        CUP$AnalizadorCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorCup$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorCup$parser.done_parsing();
          return CUP$AnalizadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= INICIO ENTER instrucciones ENTER FIN 
            {
              Object RESULT =null;

              CUP$AnalizadorCup$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= GRAFICA_PASTEL PUNTO DATOS ABRIRLLA ENTER datos_pastel CERRARLLA ENTER titulo_pastel 
            {
              Object RESULT =null;

              CUP$AnalizadorCup$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= GRAFICA_BARRAS3D PUNTO DATOS ABRIRLLA ENTER datos_barras3d CERRARLLA ENTER titulo_barras3d 
            {
              Object RESULT =null;

              CUP$AnalizadorCup$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= GRAFICA_PASTEL3D PUNTO DATOS ABRIRLLA ENTER datos_pastel3d CERRARLLA ENTER titulo_pastel3d 
            {
              Object RESULT =null;

              CUP$AnalizadorCup$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= GRAFICA_LINEAL PUNTO DATOS ABRIRLLA ENTER datos_lineas CERRARLLA ENTER titulo_lineal 
            {
              Object RESULT =null;
		
            //instrucciones.add(new Instruccion("tipo_grafica",a.getCadena()));
        
              CUP$AnalizadorCup$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dato_pastel ::= AGREGAR ABRIRPAR COMILLASDOBL VALSTR COMILLASDOBL COMA VALINT CERRARPAR PCOMA ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-6)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-3)).right;
		token b = (token)((java_cup.runtime.Symbol) CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-3)).value;
		
        try{
            instrucciones.add(new Instruccion("pastel","agregar",a.getCadena(),Integer.parseInt(b.getCadena())));
        }catch(Exception ex){
            System.out.print("Error al ingresar variables en InstruccionPastel");
        }
    
              CUP$AnalizadorCup$result = parser.getSymbolFactory().newSymbol("dato_pastel",6, ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // datos_pastel ::= datos_pastel dato_pastel 
            {
              Object RESULT =null;

              CUP$AnalizadorCup$result = parser.getSymbolFactory().newSymbol("datos_pastel",10, ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // datos_pastel ::= dato_pastel 
            {
              Object RESULT =null;

              CUP$AnalizadorCup$result = parser.getSymbolFactory().newSymbol("datos_pastel",10, ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // titulo_pastel ::= TITULO ABRIRPAR COMILLASDOBL VALSTR COMILLASDOBL CERRARPAR PCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-3)).value;
		  
             instrucciones.add(new Instruccion("pastel","titulo",a.getCadena()));
        
              CUP$AnalizadorCup$result = parser.getSymbolFactory().newSymbol("titulo_pastel",2, ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dato_barras3d ::= AGREGAR ABRIRPAR VALINT COMA COMILLASDOBL VALSTR COMILLASDOBL COMA COMILLASDOBL VALSTR COMILLASDOBL CERRARPAR PCOMA ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-11)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-8)).right;
		token b = (token)((java_cup.runtime.Symbol) CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-4)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-4)).value;
		
        try{
            instrucciones.add(new Instruccion("barras3d","agregar",Integer.parseInt(a.getCadena()),b.getCadena(),c.getCadena()));
        }catch(Exception ex){
            System.out.print("Error al ingresar variables en InstruccionBarras3D");
        }
    
              CUP$AnalizadorCup$result = parser.getSymbolFactory().newSymbol("dato_barras3d",7, ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-13)), ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // datos_barras3d ::= datos_barras3d dato_barras3d 
            {
              Object RESULT =null;

              CUP$AnalizadorCup$result = parser.getSymbolFactory().newSymbol("datos_barras3d",11, ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // datos_barras3d ::= dato_barras3d 
            {
              Object RESULT =null;

              CUP$AnalizadorCup$result = parser.getSymbolFactory().newSymbol("datos_barras3d",11, ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // titulo_barras3d ::= TITULO ABRIRPAR COMILLASDOBL VALSTR COMILLASDOBL COMA COMILLASDOBL VALSTR COMILLASDOBL COMA COMILLASDOBL VALSTR COMILLASDOBL CERRARPAR PCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-11)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-7)).right;
		token b = (token)((java_cup.runtime.Symbol) CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-3)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-3)).value;
		  
             instrucciones.add(new Instruccion("barras3d","titulo",a.getCadena(),b.getCadena(),c.getCadena()));
        
              CUP$AnalizadorCup$result = parser.getSymbolFactory().newSymbol("titulo_barras3d",3, ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-14)), ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dato_pastel3d ::= AGREGAR ABRIRPAR COMILLASDOBL VALSTR COMILLASDOBL COMA VALINT CERRARPAR PCOMA ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-6)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-3)).right;
		token b = (token)((java_cup.runtime.Symbol) CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-3)).value;
		
        try{
            instrucciones.add(new Instruccion("pastel3d","agregar",a.getCadena(),Double.parseDouble(b.getCadena())));
        }catch(Exception ex){
            System.out.print("Error al ingresar variables en InstruccionPastel3D");
        }
    
              CUP$AnalizadorCup$result = parser.getSymbolFactory().newSymbol("dato_pastel3d",8, ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // datos_pastel3d ::= datos_pastel3d dato_pastel3d 
            {
              Object RESULT =null;

              CUP$AnalizadorCup$result = parser.getSymbolFactory().newSymbol("datos_pastel3d",12, ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // datos_pastel3d ::= dato_pastel3d 
            {
              Object RESULT =null;

              CUP$AnalizadorCup$result = parser.getSymbolFactory().newSymbol("datos_pastel3d",12, ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // titulo_pastel3d ::= TITULO ABRIRPAR COMILLASDOBL VALSTR COMILLASDOBL CERRARPAR PCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-3)).value;
		  
             instrucciones.add(new Instruccion("pastel3d","titulo",a.getCadena()));
        
              CUP$AnalizadorCup$result = parser.getSymbolFactory().newSymbol("titulo_pastel3d",4, ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dato_lineas ::= AGREGAR ABRIRPAR VALINT COMA COMILLASDOBL VALSTR COMILLASDOBL COMA COMILLASDOBL VALSTR COMILLASDOBL CERRARPAR PCOMA ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-11)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-8)).right;
		token b = (token)((java_cup.runtime.Symbol) CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-4)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-4)).value;
		
        try{
            instrucciones.add(new Instruccion("lineal","agregar",Integer.parseInt(a.getCadena()),b.getCadena(),c.getCadena()));
        }catch(Exception ex){
            System.out.print("Error al ingresar variables en InstruccionLineas");
        }
    
              CUP$AnalizadorCup$result = parser.getSymbolFactory().newSymbol("dato_lineas",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-13)), ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // datos_lineas ::= datos_lineas dato_lineas 
            {
              Object RESULT =null;

              CUP$AnalizadorCup$result = parser.getSymbolFactory().newSymbol("datos_lineas",13, ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // datos_lineas ::= dato_lineas 
            {
              Object RESULT =null;

              CUP$AnalizadorCup$result = parser.getSymbolFactory().newSymbol("datos_lineas",13, ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // titulo_lineal ::= TITULO ABRIRPAR COMILLASDOBL VALSTR COMILLASDOBL COMA COMILLASDOBL VALSTR COMILLASDOBL COMA COMILLASDOBL VALSTR COMILLASDOBL CERRARPAR PCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-11)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-7)).right;
		token b = (token)((java_cup.runtime.Symbol) CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-3)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-3)).value;
		  
             instrucciones.add(new Instruccion("lineal","titulo",a.getCadena(),b.getCadena(),c.getCadena()));
        
              CUP$AnalizadorCup$result = parser.getSymbolFactory().newSymbol("titulo_lineal",5, ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.elementAt(CUP$AnalizadorCup$top-14)), ((java_cup.runtime.Symbol)CUP$AnalizadorCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorCup$do_action(
    int                        CUP$AnalizadorCup$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorCup$parser,
    java.util.Stack            CUP$AnalizadorCup$stack,
    int                        CUP$AnalizadorCup$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorCup$do_action_part00000000(
                               CUP$AnalizadorCup$act_num,
                               CUP$AnalizadorCup$parser,
                               CUP$AnalizadorCup$stack,
                               CUP$AnalizadorCup$top);
    }
}

